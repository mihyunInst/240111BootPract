package edu.kh.project.common.config;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

/* @Configuration 
 * - 설정용 클래스임 명시 
 *   + 객체로 생성해서 내부 코드를 서버 실행시 모두 수행
 * 
 * 
 * @PropertySource("경로")
 * - 지정된 경로의 properties 파일 내용을 읽어와 사용
 * - 사용할 properties 파일이 다수일 경우
 *   해당 어노테이션을 연속해서 작성하면됨
 *   
 * @Bean
 * - 개발자가 수동으로 생성한 객체의 관리를
 *   스프링에게 넘기는 어노테이션 
 *   (Bean 등록)
 *   
 * @ConfigurationProperties(prefix = "spring.datasource.hikari")
 * - @PropertySource 로 읽어온 properties 파일의 내용 중
 *   접두사(앞부분, prefix)이 일치하는 값만 읽어옴
 *   
 * - 읽어온 내용을 생성하려는 Bean에 자동으로 세팅
 * 
 * 
 * DataSource : Connection 생성 + Connection Pool 지원 하는 객체를
 * 				참조하기 위한 Java 인터페이스
 * 				(DriverManager 대안, Java JNDI 기술 이용)
 * 
 * 
 * @Autowired 
 * - 등록된 Bean 중에서 
 *   타입이 일치하거나, 상속 관계에 있는 Bean을
 *   지정된 필드에 주입
 *    == 의존성 주입(DI, Dependency Injection, IOC 관련 기술)
 */

// classpath : 자바 어플리케이션 클래스파일과 리소스 파일 로드하는 위치 나타냄
// -> classpath는 클래스로더(ClassLoader)가 클래스 파일 및 리소스 파일을 찾을 때 검색하는 경로

@Configuration
@PropertySource("classpath:/config.properties")
public class DBConfig {
	
	// 필드
	
	// import org.springframework.context.ApplicationContext;
	
	@Autowired // (DI, 의존성 주입)
	private ApplicationContext applicationContext; // 현재 프로젝트
	

	
	/////////// HikariCP 설정 /////////////
	
	@Bean
	@ConfigurationProperties(prefix = "spring.datasource.hikari")
	public HikariConfig hikariConfig() {
		
		// HikariConfig 설정 객체 생성
		// -> config.properties 파일에서 읽어온
		//    spring.datasource.hikari로 시작하는 모든 값이
		//    알맞은 필드에 세팅된 상태
		return new HikariConfig(); 
	}
	
	
	/*
	 * 해당 메서드는 HikariConfig 객체를 인자로 받아와서 HikariDataSource를 생성하고, 
	 * 이를 DataSource 타입으로 반환. 
	 * 이렇게 반환된 DataSource의 Bean은 스프링 애플리케이션에서 
	 *  데이터베이스 연결을 관리하는 데 사용됨
	 *  
	 *  
	 *  DataSource는 Java에서 데이터베이스와의 연결을 관리하는 인터페이스
	 *  1. 데이터베이스 연결 관리
	 *  2. 트랜잭션 관리
	 *  3. 쿼리 실행
	 *  4. 에러 처리
	 *  DB 연결관리하는 모든 것.
	 * */
	@Bean
	public DataSource dataSource(HikariConfig config) {
		// 매개 변수 HikariConfig config
		// -> 등록된 Bean 중 HikariConfig 타입의 Bean이 자동으로 주입
		
		DataSource dataSource = new HikariDataSource(config);
		return dataSource;
	}
	
	
	///////////  Mybatis 설정 /////////////
	
	/*
	 * SqlSessionFactory는 마이바티스(MyBatis)에서 사용되는 인터페이스로, 
	 * 데이터베이스와의 상호 작용을 위한 SQL 세션을 생성.
	 * 1. SQL 세션 생성: SqlSessionFactory는 데이터베이스와의 상호 작용을 위한 SQL 세션을 생성합니다. 
	 * SQL 세션은 데이터베이스와의 트랜잭션을 관리하고 SQL 쿼리를 실행하는 데 사용됩니다.
	 * 2. 캐시 관리: MyBatis는 성능 향상을 위해 쿼리 결과를 캐시에 저장할 수 있습니다. SqlSessionFactory는 이러한 캐시 관리를 담당합니다.
	 * 3. 매퍼 로딩: MyBatis에서는 SQL 매퍼 파일을 사용하여 SQL 쿼리를 정의합니다. SqlSessionFactory는 이러한 매퍼 파일을 로딩하고 매퍼 인터페이스와 연결합니다.
	 * 4. 트랜잭션 관리: SqlSessionFactory는 트랜잭션 관리를 지원합니다. 이를 통해 데이터베이스 작업을 원자적으로 실행하고 롤백할 수 있습니다.
	 * */
	
	@Bean
	public SqlSessionFactory sessionFactory(DataSource dataSource) throws Exception{
		
		SqlSessionFactoryBean sessionFactoryBean = new SqlSessionFactoryBean();
		
		
		sessionFactoryBean.setDataSource(dataSource);
		
		
		// mapper.xml(SQL) 파일이 모이는 경로 지정
		// -> Mybatis 코드 수행 시 mapper.xml을 읽을 수 있음
		// sessionFactoryBean.setMapperLocations("현재프로젝트.자원.어떤파일");
		
		sessionFactoryBean.setMapperLocations( 
				applicationContext.getResources("classpath:/mappers/**.xml")  );
		
		
		// 해당 패키지 내 모든 클래스의 별칭을 등록
		// - Mybatis는 특정 클래스 지정 시 패키지명.클래스명을 모두 작성해야함
		//  -> 긴 이름을 짧게 부를 별칭 설정할 수 있음
		
		// - setTypeAliasesPackage("패키지") 이용 시
		//   클래스 파일명이 별칭으로 등록
		
		// ex) (원본) edu.kh.todo.model.dto.Todo   -->  Todo (별칭 등록)
		sessionFactoryBean.setTypeAliasesPackage("edu.kh.project");
		
		
		// 마이바티스 설정 파일 경로 지정
		sessionFactoryBean.setConfigLocation(
			applicationContext.getResource("classpath:mybatis-config.xml"));
		
		// 설정 내용이 모두 적용된 객체 반환
		return sessionFactoryBean.getObject();
	}
	
	
	// DBCP(DataBase Connection Pool)
	// SqlSessionTemplate : Connection + DBCP + Mybatis + 트랜잭션 제어 처리
	@Bean
	public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory factory) {
		return new SqlSessionTemplate(factory);
	}
	
	
	// DataSourceTransactionManager : 트랜잭션 매니저(제어 처리)
	@Bean
	public DataSourceTransactionManager 
		dataSourceTransactionManager(DataSource dataSource) {
		return new DataSourceTransactionManager(dataSource);
	}
	
	
}